<template>
    <section class="add-container">
        <san-paper class="my-paper" zDepth="3">
            <app-bar title="Edit&Add-Tag" class="add-appbar">
                <ui-icon size='20' slot="left">menu</ui-icon>
                <ui-icon size='20' slot="right" class="icon-close" on-click="close">close</ui-icon>
            </app-bar>
            <section class="tagList">
                <ul>
                    <li s-for="tag, index in tagList">
                        <text-field
                            inputValue="{= tag.description =}"
                            class="tag-description"
                            errorText="{{inputErrorTextArray[index]}}"
                            maxLength="{{maxLength}}"
                        ></text-field>
                        <color-picker
                            color="{=tag.color=}"
                            alpha="{{true}}"
                            class="tag-color-picker"
                        ></color-picker>
                        <ui-icon size='24' class="delete-icon" on-click="removeTag(index)">delete_forever</ui-icon>
                    </li>
                </ul>
            </section>
            <div class="btn-group">
                <ui-button variants="raised info" style="float: right" on-click="saveEdit">
                    <ui-icon>edit</ui-icon>确认修改
                </ui-button>
                <ui-button variants="raised success" on-click="addTag">
                    <ui-icon>add_box</ui-icon>添加新标签
                </ui-button>
            </div>
        </san-paper>
    </section>
</template>
<script>
import { TextField, ColorPicker, AppBar, Icon, Button} from 'san-mui'
import Paper from 'san-mui/lib/Paper'
import connect from '../store/connect'
import swal from 'sweetalert'
import {transition} from 'san-transition'
export default connect({tagList: 'tagList'}, {editTag: 'editTag'})(
{
    components: {
        'text-field': TextField,
        'color-picker': ColorPicker,
        'san-paper': Paper,
        'app-bar': AppBar,
        'ui-icon': Icon,
        'ui-button': Button,
        'date-picker-panel': require('../../task_3.2/components/DatePickerPanel.san')
    },
    transition: transition('expand'),
    initData() {
        return {
            date: new Date(),
            dateString: '',
            title: '',
            remarks: '',
            maxLength: 10
        }
    },
    computed: {
        inputErrorTextArray() {
            let tagList = this.data.get('tagList'),
                maxLength = this.data.get('maxLength')
            tagList = tagList ? tagList : []
            return tagList.map(tag => tag.description.length > maxLength ? 'Overflow!' : '')
        }
    }, 
    removeTag(index) {
        this.data.removeAt('tagList', index)
    },
    close() {
        history.back()
    },
    saveEdit() {
        if(!this.data.get('tagList').every(tag => {
            let l = tag.description.length
            if(l === 0) {
                swal({icon: "error", title: '标签名不能为空'})
                return false
            }
            if(l > 10) {
                return false
            }
            return true
        })) {
            return
        }
        this.actions.editTag(this.data.get('tagList'))
        this.close()
    },
    addTag() {
        this.data.unshift('tagList', {
            description: '',
            color: ''
        })
    },
    handleInputOverflow(isOverflow, index) {
        this.data.set(`inputErrorTextArray[${index}]`, isOverflow === 'true' ? 'Overflow!' : '');
    },
})
</script>
<style lang="less">
    .add-container {
        position: absolute;
        top: 20vh;
        width: 550px;
        .sm-appbar {
            line-height: 3.5em;
            .icon-close {
                cursor: pointer;
            }
        }
        .my-paper {
            width: 100%;
            .add-appbar {
                margin-bottom: .5em;
                height: 3.5em;
            }
            .tagList {
                .sm-text-field-line {
                    height: 2px;
                }
                li {
                    display: inline-block;
                    .tag-description {
                        width: 10em;
                        margin-right: 2em;
                    }
                    .tag-color-picker {
                        display: inline-block;
                    }
                    .delete-icon {
                        color: rgba(255, 0, 0, 0.6);
                        position: relative;
                        top: .4em;
                        left: .2em;
                        cursor: pointer;
                    }
                }
            }
        }
    }
    .expand-enter, .expand-leave {
        transition: all .5s;
    }
    .expand-enter, .expand-before-leave {
        opacity: 1;
        transform: scale(1);
    }
    .expand-before-enter, .expand-leave {
        opacity: 0;
        transform: scale(0);
    }
</style>


